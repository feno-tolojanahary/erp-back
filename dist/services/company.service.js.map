{"version":3,"sources":["../../src/services/company.service.ts"],"sourcesContent":["import { CompanyAttributes } from \"@models/company.model\";\r\nimport { Company } from \"@models/index\";\r\nimport Address from \"@models/address/address.model\";\r\nimport BaseService from \"./base.service\";\r\nimport AddressState from \"@models/address/addressState.model\";\r\n\r\nclass CompanyService extends BaseService<Company, CompanyAttributes> {\r\n    constructor() {\r\n        super(Company);\r\n    }\r\n\r\n    public create(data: CompanyAttributes): Promise<Company> {\r\n        return new Promise((resolve, reject) => {\r\n            (async() => {\r\n                try {\r\n                    const createdCompany = await this.Model.create(data, {\r\n                        include: [ Company.Address ]\r\n                    });\r\n\r\n                    // if (createdCompany.id) {\r\n                    //     try {\r\n                    //         const address = { ...data.address, targetId: createdCompany.id, targetType: \"companies\" }\r\n                    //         await Address.create(address);\r\n                    //     } catch(err) {\r\n                    //         console.log(\"Error when creating company address: \", err);\r\n                    //     }\r\n                    // }\r\n\r\n                    // await Address.create({\r\n                    //     typeId: 3,\r\n                    //     street: \"street1\",\r\n                    //     street2: \"street2\",\r\n                    //     city: \"the city\",\r\n                    //     stateId: 1,\r\n                    //     zip: \"The zip code\",\r\n                    //     country: \"The country\",\r\n                    //     targetId: 6,\r\n                    //     targetType: \"companies\"\r\n                    // });\r\n                    // await AddressState.create({\r\n                    //     companyId: 1,\r\n                    //     country: \"France\",\r\n                    //     createdBy: 1,\r\n                    //     stateCode: \"110\",\r\n                    //     stateName: \"Antsirabe\",\r\n                    // })\r\n                    // resolve({} as Company);\r\n                    resolve(createdCompany);\r\n                } catch(err) {\r\n                    console.log(\"Error when creating company: \", err);\r\n                    reject(err);\r\n                }\r\n            })()\r\n        })\r\n    }\r\n}\r\n\r\nexport default CompanyService;"],"names":["CompanyService","BaseService","create","data","Promise","resolve","reject","createdCompany","Model","include","Company","Address","err","console","log","constructor"],"mappings":"AAAA;;;;+BAyDA,SAA8B;;aAA9B,QAA8B;;uBAxDN,iBAAe;oDAEf,gBAAgB;;;;;;AAGxC,IAAA,AAAMA,cAAc,GAApB,MAAMA,cAAc,SAASC,YAAW,QAAA;IAK7BC,MAAM,CAACC,IAAuB,EAAoB;QACrD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,GAAK;YACnC,CAAA,UAAW;gBACR,IAAI;oBACA,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACC,KAAK,CAACN,MAAM,CAACC,IAAI,EAAE;wBACjDM,OAAO,EAAE;4BAAEC,MAAO,QAAA,CAACC,OAAO;yBAAE;qBAC/B,CAAC,AAAC;oBA8BHN,OAAO,CAACE,cAAc,CAAC,CAAC;gBAC5B,EAAE,OAAMK,GAAG,EAAE;oBACTC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,GAAG,CAAC,CAAC;oBAClDN,MAAM,CAACM,GAAG,CAAC,CAAC;gBAChB,CAAC;YACL,CAAC,CAAA,EAAG;QACR,CAAC,CAAC,CAAA;IACN;IA/CAG,aAAc;QACV,KAAK,CAACL,MAAO,QAAA,CAAC,CAAC;IACnB;CA8CH;MAED,QAA8B,GAAfV,cAAc"}